diff --git a/asv_bench/benchmarks/omnisci/benchmarks.py b/asv_bench/benchmarks/omnisci/benchmarks.py
index 0e512279..a53d3c2b 100644
--- a/asv_bench/benchmarks/omnisci/benchmarks.py
+++ b/asv_bench/benchmarks/omnisci/benchmarks.py
@@ -60,6 +60,7 @@ class TimeMerge:
         BINARY_OP_DATA_SIZE[ASV_DATASET_SIZE],
         ["left"],
     ]
+    timeout=600
 
     def setup(self, shapes, how):
         self.df1 = generate_dataframe(
@@ -140,6 +141,7 @@ class TimeArithmetic:
     params = [
         UNARY_OP_DATA_SIZE[ASV_DATASET_SIZE],
     ]
+    timeout=600
 
     def setup(self, shape):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -164,10 +166,11 @@ class TimeArithmetic:
 class TimeSortValues:
     param_names = ["shape", "columns_number", "ascending_list"]
     params = [
-        UNARY_OP_DATA_SIZE[ASV_DATASET_SIZE],
+        [(10_000_000, 10)],
         [1, 5],
         [False, True],
     ]
+    timeout=600
 
     def setup(self, shape, columns_number, ascending_list):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -231,6 +234,7 @@ class TimeFillna:
         UNARY_OP_DATA_SIZE[ASV_DATASET_SIZE],
         [None],
     ]
+    timeout=600
 
     def setup(self, value_type, shape, limit):
         pd = IMPL[ASV_USE_IMPL]
@@ -293,6 +297,7 @@ class TimeIndexing:
             "function",
         ],
     ]
+    timeout=600
 
     def setup(self, shape, indexer_type):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -366,6 +371,7 @@ class TimeDescribe:
     params = [
         UNARY_OP_DATA_SIZE[ASV_DATASET_SIZE],
     ]
+    timeout=600
 
     def setup(self, shape):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
diff --git a/asv_bench/benchmarks/omnisci/utils.py b/asv_bench/benchmarks/omnisci/utils.py
index 4eac1577..385e18d3 100644
--- a/asv_bench/benchmarks/omnisci/utils.py
+++ b/asv_bench/benchmarks/omnisci/utils.py
@@ -21,7 +21,7 @@ RAND_HIGH = 1_000_000_000
 
 BINARY_OP_DATA_SIZE = {
     "big": [
-        ((500_000, 20), (1_000_000, 10)),
+        ((15_000_000, 20), (30_000_000, 10)),
     ],
     "small": [
         ((10_000, 20), (25_000, 10)),
@@ -30,7 +30,7 @@ BINARY_OP_DATA_SIZE = {
 
 UNARY_OP_DATA_SIZE = {
     "big": [
-        (1_000_000, 10),
+        (30_000_000, 10),
     ],
     "small": [
         (10_000, 10),
@@ -39,7 +39,7 @@ UNARY_OP_DATA_SIZE = {
 
 SERIES_DATA_SIZE = {
     "big": [
-        (10_000_000, 1),
+        (300_000_000, 1),
     ],
     "small": [
         (100_000, 1),
