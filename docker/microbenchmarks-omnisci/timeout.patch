diff --git a/asv_bench/benchmarks/omnisci/benchmarks.py b/asv_bench/benchmarks/omnisci/benchmarks.py
index b3dfd205..8cee38ed 100644
--- a/asv_bench/benchmarks/omnisci/benchmarks.py
+++ b/asv_bench/benchmarks/omnisci/benchmarks.py
@@ -53,6 +53,7 @@ class TimeMerge:
         get_benchmark_shapes("omnisci.TimeMerge"),
         ["left"],
     ]
+    timeout=600
 
     def setup(self, shapes, how):
         self.df1 = generate_dataframe(
@@ -129,6 +130,7 @@ class TimeBinaryOpSeries:
 class TimeArithmetic:
     param_names = ["shape"]
     params = [get_benchmark_shapes("omnisci.TimeArithmetic")]
+    timeout=600
 
     def setup(self, shape):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -157,6 +159,7 @@ class TimeSortValues:
         [1, 5],
         [False, True],
     ]
+    timeout=600
 
     def setup(self, shape, columns_number, ascending_list):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -220,6 +223,7 @@ class TimeFillna:
         get_benchmark_shapes("omnisci.TimeFillna"),
         [None],
     ]
+    timeout=600
 
     def setup(self, value_type, shape, limit):
         self.df = gen_nan_data(ASV_USE_IMPL, *shape)
@@ -281,6 +285,7 @@ class TimeIndexing:
             "function",
         ],
     ]
+    timeout=600
 
     def setup(self, shape, indexer_type):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -356,6 +361,7 @@ class TimeAstype:
 class TimeDescribe:
     param_names = ["shape"]
     params = [get_benchmark_shapes("omnisci.TimeDescribe")]
+    timeout=600
 
     def setup(self, shape):
         self.df = generate_dataframe(ASV_USE_IMPL, "int", *shape, RAND_LOW, RAND_HIGH)
@@ -419,6 +425,7 @@ class TimeGroupByMultiColumn(BaseTimeGroupBy):
         GROUPBY_NGROUPS,
         [6],
     ]
+    timeout=600
 
     def time_groupby_sum(self, *args, **kwargs):
         execute(self.df.groupby(by=self.groupby_columns).sum())
diff --git a/asv_bench/benchmarks/omnisci/io.py b/asv_bench/benchmarks/omnisci/io.py
index 300e02c8..3d5f9c1a 100644
--- a/asv_bench/benchmarks/omnisci/io.py
+++ b/asv_bench/benchmarks/omnisci/io.py
@@ -33,6 +33,7 @@ class TimeReadCsvNames:
     shapes = get_benchmark_shapes("omnisci.TimeReadCsvNames")
     param_names = ["shape"]
     params = [shapes]
+    timeout=600
 
     def setup_cache(self, test_filename="io_test_file_csv_names"):
         # filenames with a metadata of saved dataframes
