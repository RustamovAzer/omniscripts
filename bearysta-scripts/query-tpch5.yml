#
#  This is statistics aggregation recipe for Bearysta.
#
#  Install Bearysta:
#     python -m pip install git+https://github.com/IntelPython/bearysta.git
#
#  Run aggregation:
#     python -m bearysta.aggregate query-taxi.yml -P
#

input:
    config:
        #- omnisci-query-scalability.yml
        - roofline-query-scalability.yml
    path: theoretical-bdw.csv
    format: csv

filter-in:
    query:
        - theoretical bandwidth
        - tpc-h-q5

# Aggregation method (e.g. min, median, max, mean)
aggregation: max

# Axis and series column names
axis:
    - query
    - threads

series:
    - impl
#    - numa

unpack:
    - name: part
      value: "IPS(M)"

values:
    #- build-sfp
    #- build-cnfp
    - sort-merge-sfp-cnfp
    #- GB_s

# Create another table (or Excel filter) for each value in these columns
variants:
    - hostname

precomputed:
    impl: "row['File'].split('-')[0]"
    #time_ms: "row['scale']*(0.01*row['build-sfp'] + 0.15*row['build-cnfp'] + 6*row['sort-merge-sfp-cnfp'])"
    #GB_s: "row['scale']*0.16928/row['time_ms']"

# Are higher values better?
higher-is-better: true

# Number format in Python str.format() style, or the number of digits of
# precision to show in numbers in pretty-printed pivot tables
number-format: 2

# Do we figure out the number of decimals only once, using the max value,
# and disregard smaller precision numbers?
number-format-max-only: false
